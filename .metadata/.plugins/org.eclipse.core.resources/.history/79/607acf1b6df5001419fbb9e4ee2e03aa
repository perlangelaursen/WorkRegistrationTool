//Anna Oelgaard Nielsen - s144437

package apptest;

import static org.junit.Assert.*;
import java.util.GregorianCalendar;
import org.junit.Before;
import org.junit.Test;
import softwarehuset.*;

public class TestGetAvailableEmployees {
	private Address address;
	private Company company;
	private Executive executive;
	private GregorianCalendar date1, date2, date3, date4, date5, date6, date7;
	private Employee employee1, employee2, employee3, employee4;
	private Project project;
	
	@Before
	public void setUp() throws OperationNotAllowedException {
		address = new Address("City", "Street", 1);
		company = new Company("SoftwareHuset", address);
		executive = new Executive("name","Department1", company, "password");
		employee1 = company.createEmployee("ANDS", "password", "Project Department");
		employee2 = company.createEmployee("HENR", "password", "Project Department");
		employee3 = company.createEmployee("KLIS", "password", "Project Department");
		employee4 = company.createEmployee("HSNF", "password", "Project Department");
		
		date1 = new GregorianCalendar();
		date2 = new GregorianCalendar();
		date3 = new GregorianCalendar();
		date4 = new GregorianCalendar();
		date5 = new GregorianCalendar();
		date6 = new GregorianCalendar();
		date7 = new GregorianCalendar();
		
		company.executiveLogin(executive.getPassword());
		project = company.createProject("Project 1");

		//company.employeeLogin(employee1.getID(),employee1.getPassword());
		company.employeeLogout();
	}
	
	@Test
	public void testAvaiableEmployeesOnePerson() throws OperationNotAllowedException {
		//Executive assigns employee1 as project leader
		company.executiveLogin("password");
		executive.assignProjectLeader("ANDS", project.getID());
		assertEquals(project.getProjectLeader(), employee1);
		
		//dates initializes
		date1.set(2016, 3, 1);
		date2.set(2016, 4, 1);
		date3.set(2016, 5, 1);
		date4.set(2016, 6, 1);
		
		//employee 1 and 2 assigns on different activities in Project 1
		employee1.createActivity(project, "activity1", date1, date2, 3);
		employee2.createActivity(project, "activity2", date3, date4, 3);
		employee3.assignEmployeeActivity(employee2.getID(), project.getID() + "-activity1");
		employee4.assignEmployeeActivity(employee2.getID(), project.getID() + "-activity2");
		
		//time span for check initializes
		date5.set(2000, 1, 1);
		date6.set(2000, 2, 1);
		
		//Check if employee 2 is available in time span
		assertTrue(company.getAvailableEmployees(date5, date6).contains(employee2));
		
	}
	
	@Test
	public void testAvailableEmployeesThreePersons() throws OperationNotAllowedException {
		company.executiveLogin("password");
		executive.assignProjectLeader("ANDS", project.getID());
		assertEquals(project.getProjectLeader(), employee1);
		
		date1.set(2016, 3, 1);
		date2.set(2016, 4, 1);
		date3.set(2016, 5, 1);
		date4.set(2016, 6, 1);
		
		employee1.createActivity(p1, "activity1", d1, d2,3);
		employee1.createActivity(p1, "activity2", d3, d4,3);
		em.assignEmployeeActivity(em2.getID(), p1.getID() + "-activity1");
		em.assignEmployeeActivity(em3.getID(), p1.getID() + "-activity2");
		em.assignEmployeeActivity(em4.getID(), p1.getID() + "-activity2");
		
		d5.set(2000, 1, 1);
		d6.set(2000, 2, 1);
		
		assertTrue(com.getAvailableEmployees(d5, d6).contains(em2));
		assertTrue(com.getAvailableEmployees(d5, d7).contains(em2));
		assertTrue(com.getAvailableEmployees(d5, d6).contains(em4));
	}
	
//	@Test
//	public void testAvailableEmployeesOverlap() throws OperationNotAllowedException {
//		com.executiveLogin("password");
//		ex.assignProjectLeader("ANDS", p1.getID());
//		assertEquals(p1.getProjectLeader(), em);
//		
//		d1.set(2016, 3, 1);
//		d2.set(2016, 4, 1);
//		d3.set(2016, 5, 1);
//		d4.set(2016, 6, 1);
//		
//		//Create 20 activities
//		for(int i = 1; i<=20; i++){
//			em.createActivity(p1, "activity"+i, d1, d2,3);
//		}
//		assertEquals(20, p1.getActivities().size());
//		
//		assertTrue(com.getAvailableEmployees(d1, d2).contains(em2));
//		
//		//Assign employee to 20 activities
//		for(Activity a: p1.getActivities()){
//			em.assignEmployeeActivity(em2.getID(), a.getName());
//		}
//		assertEquals(20, em2.getActivities().size());
//		assertFalse(com.getAvailableEmployees(d1, d2).contains(em2));
//	}

}
